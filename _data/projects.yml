# projects section data
- name: Open Source Personalized Federated Learning Library
  gh_user: TsingZ0
  repo: PFLlib
  img: images/structure.png
  desc: |
    <small>*Federated Learning, LLM, PyTorch, Distributed Systems, Deep Learning*</small>

    **Designed and implemented** federated learning protocols for large language model (LLM) fine-tuning.

    Key achievements:
    * Designed LoRA-Enhanced PFL (Personalised Federated Learning) protocol for LLM fine-tuning, achieving:
      - **53% reduction** in communication overhead through adaptive parameter masking
      - Maintained **85% task accuracy** on GPT-2-XL and LLama models
    * Built comprehensive open-source PFL ecosystem featuring:
      - **37 algorithms** implementation (FedProx/APFL/etc.)
      - Modular API design supporting **20+ datasets** across 3 domains
      - Accumulated **1.5K+ GitHub stars**
      - Adopted by **7 research teams**

- name: Audio Driver for Rust-based Operating System
  gh_user: loaringlyc
  repo: asterinas-driver
  img: images/Audio.png
  desc: |
    <span style="font-size: 0.8em">*Rust, Operating System, Audio Driver, Frame Kernel, Virtio-IO*</span>

    **Asterinas** is the first OS on FRAME KERNEL structure, written in safe Rust, mainly for educational purposes for the moment.

    Key achievements:
    * Developed Virtio-IO audio driver
    * Successfully merged into the main branch
    * Project has gained **over 2k stars** on GitHub

- name: Video Conference Meeting Software Development
  gh_user: V1Zhang
  repo: CS305-Project
  img: images/conference.png
  desc: |
    <span style="font-size: 0.8em">*C++, Python, Vue, FastAPI, WebRTC Protocol*</span>

    **High-Performance Video Conference System** built with modern web technologies and optimized media processing.

    Key achievements:
    * Developed WebRTC-based P2P communication core with C++ media processing, achieving **<200ms latency** via adaptive bitrate and FEC (Forward Error Correction)
    * Implemented multi-room signaling server using FastAPI WebSocket, handling **100+ concurrent connections** per instance with async I/O architecture
    * Created real-time video grid UI in Vue 3 with dynamic layout switching
  
- name: RISC-V CPU on FPGA board
  gh_user: Wellshh
  repo: RISC-V-CPU
  img: images/CPU.png
  desc: |
    <span style="font-size: 0.8em">*RISC-V, Verilog, FPGA, CPU, Assembly Language*</span>

    Key achievements:
    * Designed 5-stage pipelined RISC-V core (RV32I) in Verilog, achieving **120MHz** on Xilinx Artix-7 FPGA with **1.65 CPI** via hazard detection unit
    * Implemented forwarding unit and branch prediction (2-bit BHT), reducing pipeline stalls by **72%** in CoreMark benchmark
    * Developed custom debug interface with UART-based register/memory inspection, supporting real-time PC tracing via Python CLI
    * Optimized resource utilization to **<1800 LUTs** through dynamic pipeline balancing, achieving **35% reduction** vs baseline scalar design
    * Verified compliance via RISCOF test framework, passing **300+ ISA tests** with **98.7% coverage** including ECALL/CSR corner cases

- name: Optimization of Sparse Matrix Multiplication
  gh_user: Wellshh
  repo: Sparse-Matrix-Multiplication-Optimization
  img: /images/Sparse.png
  desc: |
      <span style="font-size: 0.8em">*C++, x86, OpenBLAS, Sparse Matrix, Matrix Multiplication, Cuda*</span>

      **Optimized Sparse Matrix Multiplication Library** with CPU and GPU acceleration, outperforming industry-standard solutions.

      Key achievements:
      * Implemented optimized sparse matrix multiplication algorithms in C++, achieving **3.2x speedup** over naive implementations through advanced matrix blocking techniques and cache-aware design
      * Developed hand-tuned kernel code for small matrix blocks (4x4, 8x8), strategically reordering multiplication sequences that reduced cache misses by **67%**
      * Outperformed the OpenBLAS library by **5%** on benchmark test suites with highly sparse matrices (**>95% sparsity**), demonstrating superior algorithm design for specific use cases

- name: Mini Piano on FPGA Board
  gh_user: Wellshh
  repo: Mini_Piano-Project
  img: /images/Piano.png
  desc: |
    <span style="font-size: 0.8em">*Verilog, FPGA, Piano, Sound Generation*</span>

    A mini piano project on **FPGA** board, using Verilog to implement the piano sound generation and display.

- name: Danmu Website Backend Development
  gh_user: Wellshh
  repo: Danmu-Website
  img: /images/Danmu.png
  desc: |
    <span style="font-size: 0.8em">*Java, FastAPI, PostgreSQL*</span>

    **Danmu Website Backend** built with FastAPI, PostgreSQL, and Java.

    Key achievements:
    * Developed a RESTful API for the website backend using FastAPI, handling **1000+ requests per second** with async I/O architecture
    * Implemented user authentication and authorization with JWT tokens
    * Created a PostgreSQL database for storing user data and content, utilizing 

    



